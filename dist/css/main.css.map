{"version":3,"sources":["webpack:///./scss/modules/_reset.scss","webpack:///./scss/main.scss","webpack:///./scss/modules/_variables.scss","webpack:///../node_modules/rfs/scss.scss","webpack:///./scss/temp/spriteSvg.scss"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiFE,aAAa;EACb,eAAe;EAEf,SAAS;EACT,UAAU;EAEV,wBAAwB;EAExB,SAAS;;AAGX;AACA;;;;;;;;;;;EAWE,cAAc;;AAGhB;EACE,cAAc;;AAGhB;;EAEE,gBAAgB;;AAGlB;;EAEE,YAAY;;AAGd;;;;EAIE,WAAW;EACX,aAAa;;AAGf;EACE,iBAAiB;EACjB,yBAAyB;;AAG3B;EACE,qBAAqB;;ACpHvB;EACE,qBAAa;MAAb,iBAAa;UAAb,aAAa;;AAGf;;;EAGE,UAAU;;AAGZ;;EAEE,eAAe;;AAGjB;EACE,qBAAqB;;AAGvB;;;EAGE,sBAAsB;EAEtB,0BAA0B;;AAG5B;EACE,qBAAqB;;AAGvB;EACE,WC7Ce;ECoIX,eAAW;;AFlFjB;;EAEE,YAAY;EACZ,SAAS;EACT,UAAU;;AAGZ;EACE,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAE3B,WAAW;EACX,iBAAiB;EACjB,YAAY;EACZ,cAAc;EACd,eAAe;;AAKjB;EGSI,yFAAyC;EHP3C,WAAW;EACX,YAAY","file":"css/main.css","sourcesContent":["html,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  font: inherit;\n  font-size: 100%;\n\n  margin: 0;\n  padding: 0;\n\n  vertical-align: baseline;\n\n  border: 0;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nbody {\n  line-height: 1;\n}\n\nol,\nul {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: '';\n  content: none;\n}\n\ntable {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\n\na {\n  text-decoration: none;\n}\n","// ===================  Modules  ========================\n\n@import 'modules/reset';\n@import 'modules/variables';\n\n// ==============  Responsive Font Size  ================\n\n@import '../../node_modules/rfs/scss';\n\n// ==================== PNG Sprite ======================\n\n@import 'modules/mixin-spritePng';\n@import 'temp/spritePng.scss';\n@import 'temp/spriteSvg.scss';\n\n// ====================  Plugins  =======================\n\n// ====================  Default  =======================\n\np {\n  hyphens: auto;\n}\n\nbutton,\na,\ninput {\n  outline: 0;\n}\n\nbutton,\na {\n  cursor: pointer;\n}\n\na {\n  text-decoration: none;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n\n  transition: all .2s linear;\n}\n\nli {\n  list-style-type: none;\n}\n\nbody {\n  color: $main-color;\n\n  @include rfs(16);\n}\n\nhtml,\nbody {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  width: 100%;\n  max-width: 1170px;\n  height: 100%;\n  margin: 0 auto;\n  padding: 0 15px;\n}\n\n// =======================================\n\n.block {\n  @include sprite('agriculture');\n  width: 100%;\n  height: 100%;\n}\n","// ==================== FONTS =======================\n\n\n\n// =================== COLORS =======================\n\n$main-color: #333;\n$active-color: #0b87ff;\n","// stylelint-disable property-blacklist, scss/dollar-variable-default\n\n// SCSS RFS mixin\n//\n// Automated responsive font sizes\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)\n\n// Configuration\n\n// Base font size\n$rfs-base-font-size: 1.25rem !default;\n$rfs-font-size-unit: rem !default;\n\n@if $rfs-font-size-unit != rem and $rfs-font-size-unit != px {\n  @error \"`#{$rfs-font-size-unit}` is not a valid unit for $rfs-font-size-unit. Use `px` or `rem`.\";\n}\n\n// Breakpoint at where font-size starts decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n}\n\n// Resize font size based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != \"number\" or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-responsive-font-sizes to false\n$enable-responsive-font-sizes: true !default;\n\n// Cache $rfs-base-font-size unit\n$rfs-base-font-size-unit: unit($rfs-base-font-size);\n\n// Remove px-unit from $rfs-base-font-size for calculations\n@if $rfs-base-font-size-unit == \"px\" {\n  $rfs-base-font-size: $rfs-base-font-size / ($rfs-base-font-size * 0 + 1);\n}\n@else if $rfs-base-font-size-unit == \"rem\" {\n  $rfs-base-font-size: $rfs-base-font-size / ($rfs-base-font-size * 0 + 1 / $rfs-rem-value);\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == \"px\" {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == \"rem\" or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-disable-class {\n  @if $rfs-class == \"disable\" {\n    // Adding an extra class increases specificity, which prevents the media query to override the font size\n    &,\n    .disable-responsive-font-size &,\n    &.disable-responsive-font-size {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-enable-class {\n  @if $rfs-class == \"enable\" {\n    .enable-responsive-font-size &,\n    &.enable-responsive-font-size {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query($mq-value) {\n  @if $rfs-two-dimensional {\n    @media (max-width: #{$mq-value}), (max-height: #{$mq-value}) {\n      @content;\n    }\n  }\n  @else {\n    @media (max-width: #{$mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Responsive font size mixin\n@mixin rfs($fs, $important: false) {\n  // Cache $fs unit\n  $fs-unit: if(type-of($fs) == \"number\", unit($fs), false);\n\n  // Add !important suffix if needed\n  $rfs-suffix: if($important, \" !important\", \"\");\n\n  // If $fs isn't a number (like inherit) or $fs has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n  @if not $fs-unit or $fs-unit != \"\" and $fs-unit != \"px\" and $fs-unit != \"rem\" or $fs == 0 {\n    font-size: #{$fs}#{$rfs-suffix};\n  }\n  @else {\n    // Remove unit from $fs for calculations\n    @if $fs-unit == \"px\" {\n      $fs: $fs / ($fs * 0 + 1);\n    }\n    @else if $fs-unit == \"rem\" {\n      $fs: $fs / ($fs * 0 + 1 / $rfs-rem-value);\n    }\n\n    // Set default font size\n    $rfs-static: if($rfs-font-size-unit == rem, #{$fs / $rfs-rem-value}rem, #{$fs}px);\n\n    // Only add the media query if the font size is bigger than the minimum font size\n    @if $fs <= $rfs-base-font-size or not $enable-responsive-font-sizes {\n      font-size: #{$rfs-static}#{$rfs-suffix};\n    }\n    @else {\n      // Calculate the minimum font size for $fs\n      $fs-min: $rfs-base-font-size + ($fs - $rfs-base-font-size) / $rfs-factor;\n\n      // Calculate difference between $fs and the minimum font size\n      $fs-diff: $fs - $fs-min;\n\n      // Base font-size formatting\n      $min-width: if($rfs-font-size-unit == rem, #{$fs-min / $rfs-rem-value}rem, #{$fs-min}px);\n\n      // Use `vmin` if two-dimensional is enabled\n      $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n      // Calculate the variable width between 0 and $rfs-breakpoint\n      $variable-width: #{$fs-diff * 100 / $rfs-breakpoint}#{$variable-unit};\n\n      // Set the calculated font-size\n      $rfs-fluid: calc(#{$min-width} + #{$variable-width}) #{$rfs-suffix};\n\n      // Breakpoint formatting\n      $mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{$rfs-breakpoint / $rfs-rem-value}#{$rfs-breakpoint-unit});\n\n      @include _rfs-disable-class {\n        font-size: #{$rfs-static}#{$rfs-suffix};\n      }\n\n      @include _rfs-media-query($mq-value) {\n        @include _rfs-enable-class {\n          font-size: $rfs-fluid;\n        }\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n    }\n  }\n}\n\n// The font-size & responsive-font-size mixins use RFS to rescale the font size\n@mixin font-size($fs, $important: false) {\n  @include rfs($fs, $important);\n}\n\n@mixin responsive-font-size($fs, $important: false) {\n  @include rfs($fs, $important);\n}\n","$sprites: (\n    'agriculture': \"/../src/img/spritemap.svg#sprite-agriculture-fragment\",\n    'biology': \"/../src/img/spritemap.svg#sprite-biology-fragment\",\n    'brain': \"/../src/img/spritemap.svg#sprite-brain-fragment\",\n    'chemistry': \"/../src/img/spritemap.svg#sprite-chemistry-fragment\",\n    'light-bulb': \"/../src/img/spritemap.svg#sprite-light-bulb-fragment\"\n);\n\n$sizes: (\n    'agriculture': (\n        'width': 128px,\n        'height': 128px\n    ),\n    'biology': (\n        'width': 128px,\n        'height': 128px\n    ),\n    'brain': (\n        'width': 128px,\n        'height': 128px\n    ),\n    'chemistry': (\n        'width': 128px,\n        'height': 128px\n    ),\n    'light-bulb': (\n        'width': 128px,\n        'height': 128px\n    )\n);\n\n$variables: (\n    /* EMPTY */\n);\n\n// https://github.com/waldemarfm/sass-svg-uri/blob/v1.0.0/_svg-uri.scss\n@function sprite-str-replace($string, $search, $replace: '') {\n    $index: str-index($string, $search);\n\n    @if type-of($replace) == 'null' {\n        $replace: '';\n    }\n\n    @if ( $index ) {\n        @return str-slice($string, 1, $index - 1) + $replace + sprite-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n    }\n\n    @return $string;\n}\n\n@function sprite-svg-uri($value) {\n    $encoded: '';\n    $slice: 2000;\n    $index: 0;\n\n    @for $i from 1 through ceil(str-length($value) / $slice) {\n        $chunk: str-slice($value, $index, $index + $slice - 1);\n        $chunk: sprite-str-replace($chunk, '\"', \"'\");\n        $chunk: sprite-str-replace($chunk, '<', '%3C');\n        $chunk: sprite-str-replace($chunk, '>', '%3E');\n        $chunk: sprite-str-replace($chunk, '&', '%26');\n        $chunk: sprite-str-replace($chunk, '#', '%23');\n        $encoded: #{$encoded}#{$chunk};\n        $index: $index + $slice;\n    }\n\n    @return $encoded;\n}\n\n@mixin sprite($name, $user-variables: (), $include-size: false) {\n    $sprite: map-get($sprites, $name);\n\n    // Inject variables\n    $default-variables: map-get($variables, $name);\n    @if type-of($default-variables) == 'map' {\n        @each $key, $value in map-merge($default-variables, $user-variables) {\n            @if ( not map-has-key($default-variables, $key) ) {\n                @warn 'Sprite \\'#{$name}\\' does not support variable named \\'#{$key}\\'';\n            }\n\n            $sprite: sprite-str-replace($sprite, '___#{$key}___', sprite-svg-uri(quote(#{$value})));\n        }\n    } @else if type-of($user-variables) == 'map' {\n        @warn 'Sprite \\'#{$name}\\' does not contain any variables';\n    }\n\n    background: url($sprite) center no-repeat;\n\n    @if $include-size {\n        $size: map-get($sizes, $name);\n        background-size: map-get($size, width) map-get($size, height);\n    }\n}\n"],"sourceRoot":""}